name: "Update GitHub"
description: "Composite action for updating GitHub with release info"
inputs:
  GITHUB_APP_ID:
    description: "GitHub App ID"
    required: true
  GITHUB_APP_PRIVATE_KEY:
    description: "GitHub App private key"
    required: true
  RELEASE_TYPE:
    description: "Release type"
    required: true
  RELEASE_TAG:
    description: "Release tag"
    required: true
  RELEASE_VERSION:
    description: "Release version"
    required: true
  RELEASE_NOTES_URL:
    description: "Release notes URL"
    required: true
  TEMPORARY_BRANCH:
    description: "Temporary branch"
    required: true
  GITHUB_REPO_URL:
    description: "GitHub repo URL"
    required: true
  GITHUB_ACTOR:
    description: "GitHub actor"
    required: true
  GITHUB_SERVER_URL:
    description: "GitHub server URL"
    required: true
  GITHUB_RUN_ID:
    description: "GitHub run ID"
    required: true
  API_FILES:
    description: "API files JSON"
    required: false
    default: ""
  VERSION_FILE_PATH:
    description: "Version file path"
    required: false
    default: ""
  VERSION_FILE_RELEASE_SHA:
    description: "Version file release SHA"
    required: false
    default: ""
  VERSION_FILE_POST_RELEASE_CONTENT:
    description: "Version file post release content"
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Get github app token
      id: generate-github-app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ inputs.GITHUB_APP_ID }}
        private-key: ${{ inputs.GITHUB_APP_PRIVATE_KEY }}

    - name: Clean-up temporary branch that was retaining the now-tagged release commit
      env:
        GH_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
      shell: bash
      run: |
        echo "Cleaning up temporary branch: '/repos/:owner/:repo/git/refs/heads/${{ inputs.TEMPORARY_BRANCH }}'"
        gh api --method DELETE /repos/:owner/:repo/git/refs/heads/${{ inputs.TEMPORARY_BRANCH }}
        echo "Temporary branch '${{ inputs.TEMPORARY_BRANCH }}' cleaned up."

    - name: Common values
      shell: bash
      run: |
        echo "Setting common values for the workflow"
        GITHUB_ACTIONS_PATH="${{ inputs.GITHUB_REPO_URL }}/actions"
        GITHUB_WORKFLOW_FILE="release.yml"
        GITHUB_WORKFLOW_URL="$GITHUB_ACTIONS_PATH/workflows/$GITHUB_WORKFLOW_FILE"
        cat << EndOfFile >> $GITHUB_ENV
        GITHUB_WORKFLOW_FILE=$GITHUB_WORKFLOW_FILE
        GITHUB_WORKFLOW_LINK=[GitHub UI]($GITHUB_WORKFLOW_URL)
        GITHUB_WORKFLOW_RUN_LINK=[#${{ inputs.GITHUB_RUN_ID }}]($GITHUB_ACTIONS_PATH/runs/${{ inputs.GITHUB_RUN_ID }})
        EndOfFile
        echo "Set environment variables for GitHub workflow file and links:"
        echo "GITHUB_WORKFLOW_FILE: $GITHUB_WORKFLOW_FILE"
        echo "GITHUB_WORKFLOW_LINK: $GITHUB_WORKFLOW_LINK"
        echo "GITHUB_WORKFLOW_RUN_LINK: $GITHUB_WORKFLOW_RUN_LINK"

    - name: Create Github Release and update version.txt post-release
      if: ${{ inputs.RELEASE_TYPE == 'FULL_MAIN_BRANCH' }}
      env:
        GH_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        RELEASE_TAG: ${{ inputs.RELEASE_TAG }}
        RELEASE_NOTES_URL: ${{ inputs.RELEASE_NOTES_URL }}
        GITHUB_WORKFLOW_RUN_LINK: ${{ env.GITHUB_WORKFLOW_RUN_LINK }}
        API_FILES: ${{ inputs.API_FILES }}
        VERSION_FILE_PATH: ${{ inputs.VERSION_FILE_PATH }}
        VERSION_FILE_RELEASE_SHA: ${{ inputs.VERSION_FILE_RELEASE_SHA }}
        VERSION_FILE_POST_RELEASE_CONTENT: ${{ inputs.VERSION_FILE_POST_RELEASE_CONTENT }}
        GITHUB_ACTOR: ${{ inputs.GITHUB_ACTOR }}
      shell: bash
      run: |
        gh release create $RELEASE_TAG --verify-tag --generate-notes --notes "Release run: $GITHUB_WORKFLOW_RUN_LINK"
        echo "GitHub Release notes: [$RELEASE_TAG]($RELEASE_NOTES_URL)" >> $GITHUB_STEP_SUMMARY

        # The following is commented out in the original workflow:
        # API_FILES_JSON="$API_FILES"
        # echo "$API_FILES_JSON" | jq -c '.[]' | while read -r api_file; do
        #   MOD=$(echo "$api_file" | jq -r '.module')
        #   API_FILE_PATH=$(echo "$api_file" | jq -r '.api_file_path')
        #   API_FILE_RELEASE_SHA=$(echo "$api_file" | jq -r '.api_file_release_sha')
        #   API_FILE_POST_RELEASE_CONTENT=$(echo "$api_file" | jq -r '.api_file_post_release_content')
        #   gh api --method PUT /repos/:owner/:repo/contents/$API_FILE_PATH \
        #     --field message="Update public API file for $MOD for $RELEASE_TAG" \
        #     --field sha="$API_FILE_RELEASE_SHA" \
        #     --field content="$API_FILE_POST_RELEASE_CONTENT"
        # done

        # # Then commit the version file
        # cat << EndOfFile > commit-message.txt
        # Post-release of $RELEASE_TAG by @$GITHUB_ACTOR: set version
        # 
        # Setting snapshot version after @$GITHUB_ACTOR published $RELEASE_NOTES_URL
        # EndOfFile
        # 
        # gh api --method PUT /repos/:owner/:repo/contents/$VERSION_FILE_PATH \
        #   --field message="@commit-message.txt" \
        #   --field sha="$VERSION_FILE_RELEASE_SHA" \
        #   --field content="$VERSION_FILE_POST_RELEASE_CONTENT"

    - name: Update PR with comment
      if: ${{ inputs.RELEASE_TYPE == 'PREVIEW_FEATURE_BRANCH' }}
      env:
        GH_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}
        GITHUB_ACTOR: ${{ inputs.GITHUB_ACTOR }}
        GITHUB_WORKFLOW_LINK: ${{ env.GITHUB_WORKFLOW_LINK }}
        GITHUB_WORKFLOW_FILE: ${{ env.GITHUB_WORKFLOW_FILE }}
        GITHUB_WORKFLOW_RUN_LINK: ${{ env.GITHUB_WORKFLOW_RUN_LINK }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
      shell: bash
      run: |
        echo "Updating PR with comment for preview release"
        cat << EndOfFile > comment_body.txt
        @${GITHUB_ACTOR} has published a preview version of this PR with release workflow run $GITHUB_WORKFLOW_RUN_LINK, based on commit ${{ github.sha }}:

        $RELEASE_VERSION

        <details>
        <summary>Want to make another preview release?</summary>

        Click 'Run workflow' in the $GITHUB_WORKFLOW_LINK, specifying the $GITHUB_REF_NAME branch, or use the [GitHub CLI](https://cli.github.com/) command:

        gh workflow run $GITHUB_WORKFLOW_FILE --ref $GITHUB_REF_NAME

        </details>

        <details>
        <summary>Want to make a full release after this PR is merged?</summary>

        Click 'Run workflow' in the $GITHUB_WORKFLOW_LINK, leaving the branch as the default, or use the [GitHub CLI](https://cli.github.com/) command:

        gh workflow run $GITHUB_WORKFLOW_FILE

        </details>
        EndOfFile

        cat comment_body.txt

        gh pr comment ${{ github.ref_name }} --body-file comment_body.txt >> $GITHUB_STEP_SUMMARY

