name: Gradle Library Release Workflow

on:
  workflow_call:
    inputs:
      SOURCE_DIR:
        description: 'Path to source directory. For monorepos, this is the path to the library source directory. Leave empty for the root directory.'
        required: false
        default: ''
        type: string
      MODULES:
        description: 'Comma-separated list of module names to build (e.g. "core,utils,api").'
        required: true
        type: string
      API_FILE:
        description: 'Path to API file relative to the module directory.'
        required: false
        default: 'api/api.txt'
        type: string
      VERSION_FILE:
        description: 'Path to version file relative to the source directory.'
        required: false
        default: 'version.txt'
        type: string
      GITHUB_APP_ID:
        description:
          "App ID for a GitHub App that is allowed to push directly to the default branch. Eg, App ID on:
          https://github.com/organizations/guardian/settings/apps/gu-scala-library-release"
        default: '807361' # Only for use by the Guardian!
        required: false # ...but if you're not the Guardian, you'll want to set this explicitly
        type: string
    secrets:
      SONATYPE_TOKEN:
        description: 'Sonatype authentication token, colon-separated (username:password) - https://central.sonatype.org/publish/generate-token/'
        required: true
      PGP_PRIVATE_KEY:
        description:
          "A passphrase-less PGP private key used to sign artifacts, commits, & tags.
          Should be in normal plaintext (ASCII-armored) format, starting 'BEGIN PGP PUBLIC KEY BLOCK', with no additional BASE64-encoding.
          The passphrase can be removed from an existing key using 'gpg --edit-key <key-id> passwd' : https://unix.stackexchange.com/a/550538/46453"
        required: true
      GITHUB_APP_PRIVATE_KEY:
        description:
          "See https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/managing-private-keys-for-github-apps#generating-private-keys
          Should be in normal plaintext format, starting '-----BEGIN RSA PRIVATE KEY-----'"
        required: true
    outputs:
      RELEASE_VERSION:
        description: "The un-prefixed version number of the release, eg '3.0.1'"
        value: ${{ jobs.push-release-commit.outputs.release-version }}
      RELEASE_TYPE:
        description: "Either 'FULL_MAIN_BRANCH' or 'PREVIEW_FEATURE_BRANCH' - whether this is a full release or a pre-release"
        value: ${{ jobs.init.outputs.release-type }}

env:
  LOCAL_ARTIFACTS_STAGING_PATH: /tmp/artifact_staging
  COMMITTER_NAME: "@${{github.actor}} using gha-gradle-library-release-workflow"
  RUN_ATTEMPT_UID: ${{ github.run_id }}-${{ github.run_attempt }}
  TEMPORARY_BRANCH: release-workflow/temporary/${{ github.run_id }}
  GITHUB_REPO_URL: ${{ github.server_url }}/${{ github.repository }}

jobs:
  init:
    name: ðŸ”’ Init
    runs-on: ubuntu-latest
    outputs:
      pgp-key-fingerprint: ${{ steps.act.outputs.pgp-key-fingerprint }}
      pgp-key-email: ${{ steps.act.outputs.pgp-key-email }}
      release-type: ${{ steps.act.outputs.release-type }}
      version-suffix: ${{ steps.act.outputs.version-suffix }}
    steps:
      - id: act
        uses: guardian/gha-scala-library-release-workflow/actions/init@main
        with:
          pgp-private-key: ${{ secrets.PGP_PRIVATE_KEY }}

  versioning:
    name: ðŸŽŠ Versioning
    needs: init
    runs-on: ubuntu-latest
    outputs:
      library-build-major-java-version: ${{ steps.versioning.outputs.library-build-major-java-version }}
    steps:
      - name: Versioning
        id: versioning
        uses: guardian/gha-gradle-library-release-workflow/.github/actions/versioning@ab/update-to-support-gradle-and-monorepo-configs
        with:
          SOURCE_DIR: ${{ inputs.SOURCE_DIR }}
          MODULES: ${{ inputs.MODULES }}
          API_FILE: ${{ inputs.API_FILE }}
          VERSION_FILE: ${{ inputs.VERSION_FILE }}
          VERSION_SUFFIX: ${{ needs.init.outputs.version-suffix }}
          PGP_KEY_EMAIL: ${{ needs.init.outputs.pgp-key-email }}

  push-release-commit:
    name: ðŸ”’ Push Release Commit
    needs: [versioning, init]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release-tag: ${{ steps.push-release-commit.outputs.release-tag }}
      release-notes-url: ${{ steps.push-release-commit.outputs.release-notes-url }}
      release-version: ${{ steps.push-release-commit.outputs.release-version }}
      release-commit-id: ${{ steps.push-release-commit.outputs.release-commit-id }}
      version-file-path: ${{ steps.push-release-commit.outputs.version-file-path }}
      version-file-release-sha: ${{ steps.push-release-commit.outputs.version-file-release-sha }}
      version-file-post-release-content: ${{ steps.push-release-commit.outputs.version-file-post-release-content }}
      temporary-branch: ${{ steps.push-release-commit.outputs.temporary-branch }}
      api-files: ${{ steps.push-release-commit.outputs.api-files }}
    steps:
      - name: Push Release Commit
        id: push-release-commit
        uses: guardian/gha-gradle-library-release-workflow/.github/actions/push-release-commit@ab/update-to-support-gradle-and-monorepo-configs
        with:
          GITHUB_APP_ID: ${{ inputs.GITHUB_APP_ID }}
          GITHUB_APP_PRIVATE_KEY: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}
          SOURCE_DIR: ${{ inputs.SOURCE_DIR }}
          VERSION_FILE: ${{ inputs.VERSION_FILE }}
          API_FILE: ${{ inputs.API_FILE }}
          MODULES: ${{ inputs.MODULES }}
          RELEASE_TYPE: ${{ needs.init.outputs.release-type }}
          VERSION_SUFFIX: ${{ needs.init.outputs.version-suffix }}
          TEMPORARY_BRANCH: ${{ env.TEMPORARY_BRANCH }}
          GITHUB_REPO_URL: ${{ env.GITHUB_REPO_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}

  create-artifacts:
    name: ðŸŽŠ Create artifacts
    needs: [init, versioning, push-release-commit]
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ needs.push-release-commit.outputs.release-version }}
    outputs:
      artifact-sha256sums: ${{ steps.create-artifacts.outputs.artifact-sha256sums }}
    steps:
      - name: Create Artifacts
        id: create-artifacts
        uses: guardian/gha-gradle-library-release-workflow/.github/actions/create-artifacts@ab/update-to-support-gradle-and-monorepo-configs
        with:
          SOURCE_DIR: ${{ inputs.SOURCE_DIR }}
          MODULES: ${{ inputs.MODULES }}
          VERSION_FILE: ${{ inputs.VERSION_FILE }}
          LOCAL_ARTIFACTS_STAGING_PATH: ${{ env.LOCAL_ARTIFACTS_STAGING_PATH }}
          RELEASE_VERSION: ${{ needs.push-release-commit.outputs.release-version }}

  sign:
    name: ðŸ”’ Sign
    needs: [init, push-release-commit, create-artifacts]
    runs-on: ubuntu-latest
    steps:
      - uses: guardian/gha-scala-library-release-workflow/actions/sign@main
        with:
          github-app-id: ${{ inputs.GITHUB_APP_ID }}
          github-app-private-key: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}
          pgp-key-email: ${{ needs.init.outputs.pgp-key-email }}
          pgp-key-fingerprint: ${{ needs.init.outputs.pgp-key-fingerprint }}
          pgp-private-key: ${{ secrets.PGP_PRIVATE_KEY }}
          release-type: ${{ needs.init.outputs.release-type }}
          release-tag: ${{ needs.push-release-commit.outputs.release-tag }}
          release-commit-id: ${{ needs.push-release-commit.outputs.release-commit-id }}
          artifact-sha256sums: ${{ needs.create-artifacts.outputs.artifact-sha256sums }}

  sonatype-release:
    name: ðŸ”’ Sonatype Release
    needs: [push-release-commit, sign]
    runs-on: ubuntu-latest
    steps:
      - uses: guardian/gha-scala-library-release-workflow/actions/sonatype-release@main
        with:
          release-version: ${{ needs.push-release-commit.outputs.release-version }}
          sonatype-token: ${{ secrets.SONATYPE_TOKEN }}

  update-github:
    name: ðŸ”’ Update GitHub
    needs:  [init, push-release-commit, sign, sonatype-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      RELEASE_TAG: ${{ needs.push-release-commit.outputs.release-tag }}
      RELEASE_VERSION: ${{ needs.push-release-commit.outputs.release-version }}
      RELEASE_NOTES_URL: ${{ needs.push-release-commit.outputs.release-notes-url }}
      GH_REPO: ${{ github.repository }}
    steps:

      - name: Get github app token
        id: generate-github-app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ inputs.GITHUB_APP_ID }}
          private-key: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}

      - name: Clean-up temporary branch that was retaining the now-tagged release commit
        env:
          GH_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          gh api --method DELETE /repos/:owner/:repo/git/refs/heads/$TEMPORARY_BRANCH

      - name: Common values
        run: |
          GITHUB_ACTIONS_PATH="$GITHUB_REPO_URL/actions"
          GITHUB_WORKFLOW_FILE="release.yml" # Could be derived from $GITHUB_WORKFLOW_REF
          GITHUB_WORKFLOW_URL="$GITHUB_ACTIONS_PATH/workflows/$GITHUB_WORKFLOW_FILE"
          
          cat << EndOfFile >> $GITHUB_ENV
          GITHUB_WORKFLOW_FILE=$GITHUB_WORKFLOW_FILE
          GITHUB_WORKFLOW_LINK=[GitHub UI]($GITHUB_WORKFLOW_URL)
          GITHUB_WORKFLOW_RUN_LINK=[#${{ github.run_number }}]($GITHUB_ACTIONS_PATH/runs/${{ github.run_id }})
          EndOfFile

      - name: Create Github Release and update version.txt post-release
        if: needs.init.outputs.release-type == 'FULL_MAIN_BRANCH'
        env:
          GH_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          # Create a release with the tag and previous commits
          gh release create $RELEASE_TAG --verify-tag --generate-notes --notes "Release run: $GITHUB_WORKFLOW_RUN_LINK"
          echo "GitHub Release notes: [$RELEASE_TAG]($RELEASE_NOTES_URL)" >> $GITHUB_STEP_SUMMARY

          # # Commit API files for each module
          # API_FILES_JSON='${{ needs.push-release-commit.outputs.api-files }}'
          # echo "$API_FILES_JSON" | jq -c '.[]' | while read -r api_file; do
          #   MOD=$(echo "$api_file" | jq -r '.module')
          #   API_FILE_PATH=$(echo "$api_file" | jq -r '.api_file_path')
          #   API_FILE_RELEASE_SHA=$(echo "$api_file" | jq -r '.api_file_release_sha')
          #   API_FILE_POST_RELEASE_CONTENT=$(echo "$api_file" | jq -r '.api_file_post_release_content')
          #   gh api --method PUT /repos/:owner/:repo/contents/$API_FILE_PATH \
          #     --field message="Update public API file for $MOD for $RELEASE_TAG" \
          #     --field sha="$API_FILE_RELEASE_SHA" \
          #     --field content="$API_FILE_POST_RELEASE_CONTENT"
          # done
          
          # # Then commit the version file
          # cat << EndOfFile > commit-message.txt
          # Post-release of $RELEASE_TAG by @${{github.actor}}: set version
          # 
          # Setting snapshot version after @${{github.actor}} published $RELEASE_NOTES_URL
          # EndOfFile
          # 
          # gh api --method PUT /repos/:owner/:repo/contents/${{ needs.push-release-commit.outputs.version_file_path }} \
          #   --field message="@commit-message.txt" \
          #   --field sha="${{ needs.push-release-commit.outputs.version_file_release_sha }}" \
          #   --field content="${{ needs.push-release-commit.outputs.version_file_post_release_content }}"
          
      - name: Update PR with comment
        if: needs.init.outputs.release-type == 'PREVIEW_FEATURE_BRANCH'
        env:
          GH_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          cat << EndOfFile > comment_body.txt
          @${{github.actor}} has published a preview version of this PR with release workflow run $GITHUB_WORKFLOW_RUN_LINK, based on commit ${{ github.sha }}:
          
          $RELEASE_VERSION
          
          <details>
          <summary>Want to make another preview release?</summary>
          
          Click 'Run workflow' in the $GITHUB_WORKFLOW_LINK, specifying the $GITHUB_REF_NAME branch, or use the [GitHub CLI](https://cli.github.com/) command:
          
          gh workflow run $GITHUB_WORKFLOW_FILE --ref $GITHUB_REF_NAME
          
          </details>
          
          <details>
          <summary>Want to make a full release after this PR is merged?</summary>
          
          Click 'Run workflow' in the $GITHUB_WORKFLOW_LINK, leaving the branch as the default, or use the [GitHub CLI](https://cli.github.com/) command:
          
          gh workflow run $GITHUB_WORKFLOW_FILE
          
          </details>
          EndOfFile
          
          cat comment_body.txt

          gh pr comment ${{ github.ref_name }} --body-file comment_body.txt >> $GITHUB_STEP_SUMMARY

